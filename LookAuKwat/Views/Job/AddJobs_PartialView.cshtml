@model LookAuKwat.ViewModel.JobViewModel
@using LookAuKwat.ViewModel

@using (Ajax.BeginForm("AddJobs_PartialView","Job", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "ProductAdd" }, new { name = "jobform", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })



        @*<div class="form-group">
            @Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Category, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
            </div>
        </div>*@
        <div class="form-group">
            @Html.LabelFor(model => model.SearchOrAskJob, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.SearchOrAskJob, SelectListMethod.ChooseSearchOrAsk(), "choisir", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SearchOrAskJob, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group hidden" id="ActivitySectorDiv">
            @Html.LabelFor(model => model.ActivitySector, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.ActivitySector, SelectListMethod.GetListActivitySector(), "Choisir", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ActivitySector, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group hidden"
             id="TypeContractDiv">
            @Html.LabelFor(model => model.TypeContract, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.TypeContract, SelectListMethod.GetListWorkContract(), "Choisir", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TypeContract, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="hidden" id="TitleJobDiv">
            <div class="form-group">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
                <p class="col-md-2" id="spanJobTitle" style="color:lightgreen">Suivant <span class="glyphicon glyphicon-plus"></span></p>
            </div>
            
        </div>
        <div class="hidden" id="DescriptionJobDiv">
            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-8">
                    @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
                <p class="col-md-2" id="spanJobDescription" style="color:lightgreen">Suivant <span class="glyphicon glyphicon-plus"></span></p>
            </div>
        </div>
        <div class="form-group hidden" id="TownJobDiv">
            @Html.LabelFor(model => model.Town, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Town, SelectListMethod.GetListTownCameroon(), "Choisir", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Town, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="hidden" id="StreetJobDiv">
            <p class=" col-md-offset-2 text-info">Veuillez choisir une adresse de la liste après votre saisie.</p>
            <div class="form-group">
                @Html.LabelFor(model => model.Street, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Street, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Street, "", new { @class = "text-danger" })
                </div>
                <p class="col-md-2" id="spanJobStreet" style="color:lightgreen">Suivant <span class="glyphicon glyphicon-plus"></span></p>
            </div>
        </div>

        <div class="form-group hidden" id="priceJobDiv">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class="form-group hidden" id="imageJobDiv">
            @Html.LabelFor(model => model.Imageproduct.Image, htmlAttributes: new { @class = "control-label col-md-2" })

            @*<label class="control-label col-md-2" for="#imagesJobs"></label>*@
            <div class="col-md-6">

                <input type="file" name="ImageFile" accept="image/*" multiple="multiple" @*onchange="readURL(this);"*@>
                <p class="text-info">Vous pouvez sélectionner à la fois une ou plusieurs images.</p>
            </div>
            @*<div style="height:50px " class="col-md-4">
                <img id="InitiativeImageUpToDate" src="https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png" alt="photo de initiative" height="50" />
            </div>*@
        </div>

        <div class="form-group hidden" id="btnJobDiv">
            <div class="col-md-offset-2 col-md-10">
                <input id="btnAddJob" type="submit" value="Ajouter" class="btn btn-success" />
            </div>
        </div>
    </div>
}


@section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }




<script type="text/javascript">
    $(function () {

        //$("#SearchOrAskJob").change(function () {

        //    if ($('#SearchOrAskJob').val() == 'J\'offre') {


        //        $("#priceJobDiv").slideDown();

        //    }
        //    else {
        //        $("#priceJobDiv").slideUp();

        //    }
        //});

        $("#SearchOrAskJob").change(function () {

            if ($('#SearchOrAskJob').val() !== 'choisir') {


                $("#ActivitySectorDiv").removeClass('hidden');

            }
        });
        $("#ActivitySectorDiv").change(function () {

            if ($('#ActivitySectorDiv').val() !== 'choisir') {


                $("#TypeContractDiv").removeClass('hidden');

            }
        });
        $("#TypeContractDiv").change(function () {

            if ($('#TypeContractDiv').val() !== 'choisir') {


                $("#TitleJobDiv").removeClass('hidden');

            }
        });
        $("#TitleJobDiv").change(function () {

            if ($('#TitleJob').val() !== '') {


                $("#DescriptionJobDiv").removeClass('hidden');

            }
        });
        $("#DescriptionJobDiv").change(function () {

            if ($('#DescriptionJob').val() !== '') {


                $("#TownJobDiv").removeClass('hidden');

            }
        });
        $("#TownJobDiv").change(function () {

            if ($('#Town').val() !== '') {


                $("#StreetJobDiv").removeClass('hidden');

            }
        });
        $("#StreetJobDiv").change(function () {

            if ($('#Street').val() !== '' && $('#SearchOrAskJob').val() == 'Je recherche') {


                $("#imageJobDiv").removeClass('hidden');
                $("#btnJobDiv").removeClass('hidden');

            } else if ($('#Street').val() !== '' && $('#SearchOrAskJob').val() == 'J\'offre') {
                $("#priceJobDiv").removeClass('hidden');
                $("#imageJobDiv").removeClass('hidden');
                $("#btnJobDiv").removeClass('hidden');
            }
        });

        //for plus sign
        $('#spanJobTitle').click(function () {
            $("#spanJobTitle").addClass('hidden');
        })

        $('#spanJobDescription').click(function () {
            $("#spanJobDescription").addClass('hidden');
        })

        $('#spanJobStreet').click(function () {
            $("#spanJobStreet").addClass('hidden');
        }) 


        $('#btnAddJob').click(function () {
           // var x = document.forms["jobform"]["Type"].value;
            var y = document.forms["jobform"]["Title"].value;
            var z = document.forms["jobform"]["Description"].value;
            var u = document.forms["jobform"]["Street"].value;
            var w = document.forms["jobform"]["Price"].value;


            if ( y !== "" && z !== "" && u !== "" && w !== "") {

                $('#MyModalAddJob').modal('hide');
                $(".js-alert").removeClass('hidden').delay(5000).queue(function () {
                    $(this).addClass('hidden').dequeue();
                });


            }

        });

        $("#Street").autocomplete({
        source: function (request, response) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("ShowAddress", "Job")',
            dataType: "json",
            headers: {
                //"api-key": searchServiceApiKey,
                "Content-Type": "application/json"
            },
            data: JSON.stringify({
                top: 5,

               // country: $("#Country").val(),
                    town: $("#Town").val(),
                 // zipcode: $("#ZipCode").val(),
                term: request.term
            }),
            success: function (data) {
                if (data && data.length > 0) {
                      var parsedDate = $.parseJSON(data);

                        response((parsedDate["results"]).map(feature => feature["formatted"]));

                    }
                }
            });
            }, select: function (event, ui) {
                //remember the selected item
                $('#Street')
                    .data('selected-item', ui.item.label);
            },
        minLength: 3,
        position: {
            //my: "left top",
            //at: "left-23 bottom+10"
            my: "left top",
  at: "left-3 bottom+0",
            of: "#Street"
            },
            appendTo: "#MyModalAddJob"
        }).blur(function () {
            var value = $('#Street').val();
            //check if the input's value matches the selected item
            if (value != $('#Street').data('selected-item')) {
                //they don't, the user must have typed something else
                $('#Street')
                    .val('') //clear the input's text
                    .data('selected-item', ''); //clear the selected item
            }
        });

    });
</script>