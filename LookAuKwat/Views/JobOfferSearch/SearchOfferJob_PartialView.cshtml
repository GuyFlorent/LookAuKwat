@model LookAuKwat.ViewModel.SeachJobViewModel
@using LookAuKwat.ViewModel


@using (Html.BeginForm("ResultSearchOfferJob_PartialView", "JobOfferSearch" ))
{
    @Html.AntiForgeryToken()

    <div>
        <h4 class="text-center">Filtre de la <strong>rercherche</strong> dans la catégorie <strong>emploi</strong></h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="row">
        @*<div class="form-group col-xs-6 col-sm-4 col-md-3">
            @Html.LabelFor(model => model.TitleSearch, htmlAttributes: new { @class = "control-label " })

            @Html.EditorFor(model => model.TitleSearch, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.TitleSearch, "", new { @class = "text-danger" })

        </div>*@

        <div class="form-group col-xs-6 col-sm-4 col-md-2">
            @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label " })
            @Html.DropDownListFor(model => model.Country, SelectListMethod.GetCountryList(), "Tous les Pays", new { @id = "CountryJob", @class = "form-control Country" })
            @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })

        </div>
        <div class="form-group col-xs-6 col-sm-4 col-md-2">
            @Html.LabelFor(model => model.TownSearch, htmlAttributes: new { @class = "control-label " })

            @Html.DropDownListFor(model => model.TownSearch, SelectListMethod.GetListTownCameroon(), "Toutes", new { @class = "form-control TownSearchJob", id = "TownSearchJob" })
            @Html.ValidationMessageFor(model => model.TownSearch, "", new { @class = "text-danger" })

        </div>
        <div class="form-group col-xs-6 col-sm-4 col-md-2">
            @Html.LabelFor(model => model.ActivitySectorJob, htmlAttributes: new { @class = "control-label " })

            @Html.DropDownListFor(model => model.ActivitySectorJob, SelectListMethod.GetListActivitySector(), "Tout", new { @class = "form-control " })
            @Html.ValidationMessageFor(model => model.ActivitySectorJob, "", new { @class = "text-danger" })

        </div>
        <div class="form-group col-xs-6 col-sm-4 col-md-2">
            @Html.LabelFor(model => model.TypeContractJob, htmlAttributes: new { @class = "control-label" })

            @Html.DropDownListFor(model => model.TypeContractJob, SelectListMethod.GetListWorkContract(), "Tout", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.TypeContractJob, "", new { @class = "text-danger" })

        </div>

        @*<div class="form-group col-xs-6 col-sm-4 col-md-3">
            @Html.LabelFor(model => model.StreetSearch, htmlAttributes: new { @class = "control-label" })

            @Html.EditorFor(model => model.StreetSearch, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.StreetSearch, "", new { @class = "text-danger" })

        </div>*@

        <div class="form-group col-xs-4 col-sm-4 col-md-2">
            @Html.LabelFor(model => model.PriceMinSearch, htmlAttributes: new { @class = "control-label " })

            @Html.EditorFor(model => model.PriceMinSearch, new { htmlAttributes = new { @class = "form-control", id = "PriceMinSearchJob" } })
            @Html.ValidationMessageFor(model => model.PriceMinSearch, "", new { @class = "text-danger" })

        </div>

        <div class="form-group col-xs-6 col-sm-4 col-md-2">
            @Html.LabelFor(model => model.PriceMaxSearch, htmlAttributes: new { @class = "control-label " })

            @Html.EditorFor(model => model.PriceMaxSearch, new { htmlAttributes = new { @class = "form-control", id = "PriceMaxSearchJob" } })
            @Html.ValidationMessageFor(model => model.PriceMaxSearch, "", new { @class = "text-danger" })

        </div>

        @*<div class="form-group col-xs-6 col-sm-4 col-md-3">
            @Html.LabelFor(model => model.SearchOrAskJobJob, htmlAttributes: new { @class = "control-label " })

            @Html.DropDownListFor(model => model.SearchOrAskJobJob, SelectListMethod.ChooseSearchOrAsk(), new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.SearchOrAskJobJob, "", new { @class = "text-danger" })

        </div>*@

    </div>

        <button id="submitJobb" type="submit" class="btn btn-primary">
            <span class="glyphicon glyphicon-search"></span> <strong>Rechercher (<span class="badge"></span> Résultats)</strong>
        </button>
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script type="text/javascript">
    $(function () {
        FindContryTown();
        ResultJobSpan();
        $("#ActivitySectorJob").change(ResultJobSpan);
        $("#TownSearchJob").change(ResultJobSpan);
        $("#TypeContractJob").change(ResultJobSpan);
        $("#CountryJob").change(ResultJobSpan);
        
        $('#PriceMinSearchJob').on('input', function () {
            ResultJobSpan();
        });
        $('#PriceMaxSearchJob').on('input', function () {
            ResultJobSpan();
        });
    });


    $("#CountryJob").change(function () {

        FindContryTown();
    });

    function FindContryTown() {

        var country = $("#CountryJob").val();
        if (country == null || country == "") {
            //alert("Veillez choisir un pays s'il vous plaît");
            return;
        }
        // $("input[id='ClientName']").val(country);
        if (country != null || country != "") {
            $.ajax({
                url: "/Product/BindTown",
                type: "POST",
                data: JSON.stringify({ 'country': country }),
                dataType: "json",
                traditional: true,
                contentType: "application/json; charset=utf-8",
                success: function (result) {

                    //debugger;  
                    var tout = "Toutes les villes"
                    var listItems = "<option value='" + tout + "'>" + tout

                        + "</option>";
                    // var list = "";
                    var a = result;
                    //var s = result.bindingAddresses.siteAdd;
                    for (i in result) {

                        listItems += "<option value='" + a[i].Value + "'>" + a[i].Text

                            + "</option>";
                    }
                    $("#TownSearchJob").html(listItems);
                    var OldValueTown = localStorage.getItem('OldValueTown');
                    if (OldValueTown != '') {

                        $("#TownSearchJob").val(OldValueTown);
                        ResultJobSpan();
                    }

                    //for (j in s) {
                    //    list += "<option value='" + s[j].Value + "'>" + s[j].Text +

                    //        "</option>";
                    //}
                    //$("#SiteId").html(list);
                },
                error: function () {
                    alert("An error has occured!!!");
                }
            });
        }

    }


    function ResultJobSpan() {
        var townValue = $("#TownSearchJob").val();

        if (townValue != '' && townValue != null) {

            localStorage.setItem('OldValueTown', townValue);
        }
        $.ajax({
            type: "POST",
            url: '@Url.Action("ResultJobSpan_Jason", "JobOfferSearch")',
            dataType: "json",
            headers: {
                //"api-key": searchServiceApiKey,
                "Content-Type": "application/json"
            },
            data: JSON.stringify({

                sector: $("#ActivitySectorJob").val(),
                town: $("#TownSearchJob").val(),
                contract: $("#TypeContractJob").val(),
                minPrice: $("#PriceMinSearchJob").val(),
                maxPrice: $("#PriceMaxSearchJob").val(),
                country: $("#CountryJob").val(),
            }),
            success: function (data) {

                var $badge = $("#submitJobb").find('.badge')
                    //number = Object.keys(data).length;
                $badge.text(data);

            }
            //,
            //error: function (xhr) {
            //    console.log(xhr.responseText);
            //    alert("Une erreur est survenu  !");
            //}
        })
    }
</script>