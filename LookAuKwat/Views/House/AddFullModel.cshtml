@model LookAuKwat.ViewModel.HouseViewModel
@using LookAuKwat.ViewModel
@{
    ViewBag.Title = "Déposer une annonce catégorie Maison rubrique Ammeublement";
}

<h2>Valider votre annonce de la catégorie Maison rubrique @Model.RubriqueHouse</h2>

@using (Html.BeginForm("AddHouse","House", new { RubriqueHouse = Model.RubriqueHouse, SearchOrAskJob = Model.SearchOrAskJob, 
    TypeHouse=Model.TypeHouse,FabricMaterialeHouse = Model.FabricMaterialeHouse, ColorHouse = Model.ColorHouse,
StateHouse= Model.StateHouse, Price =Model.Price}, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group " >
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-6">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>

        </div>


        <div class="form-group " >
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-6">
                @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @cols = "45", @rows = "5" })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>

        </div>

        <div class="form-group " >
            @Html.LabelFor(model => model.Town, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.DropDownListFor(model => model.Town, SelectListMethod.GetListTownCameroon(), "choisir", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Town, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="">
            <p class=" col-md-offset-4 text-info">Veuillez choisir une adresse de la liste après votre saisie.</p>
            <div class="form-group">

                @Html.LabelFor(model => model.Street, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-6">
                    @Html.EditorFor(model => model.Street, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Street, "", new { @class = "text-danger" })
                </div>

            </div>
        </div>

        <div class="form-group hidden">
            @Html.LabelFor(model => model.Imageproduct.Image, htmlAttributes: new { @class = "control-label col-md-4" })

           
            <div class="col-md-8">

                <input type="file" name="ImageFile" accept="image/*" multiple="multiple" @*onchange="readURL(this);"*@>
                <p class="text-info">Vous pouvez sélectionner à la fois une ou trois(3) images au maximun.</p>
            </div>
           
        </div>

        <div class="form-group " >
            <div class="col-md-offset-4 col-md-8">
                <button type="submit" class="btn btn-success">Suivant <span class="glyphicon glyphicon-menu-right"></span></button>
            </div>
        </div>
    </div>

}
<p>Page 2 sur 2</p>


<script type="text/javascript">
    $(function () {
        $("#Street").autocomplete({
        source: function (request, response) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("ShowAddress", "Job")',
            dataType: "json",
            headers: {
                //"api-key": searchServiceApiKey,
                "Content-Type": "application/json"
            },
            data: JSON.stringify({
                top: 5,

               // country: $("#Country").val(),
                town: $("#Town").val(),
                 // zipcode: $("#ZipCode").val(),
                term: request.term
            }),
            success: function (data) {
                if (data && data.length > 0) {
                      var parsedDate = $.parseJSON(data);

                        response((parsedDate["results"]).map(feature => feature["formatted"]));

                    }
                }
            });
            },
            select: function (event, ui) {
                //remember the selected item
                $('#Street')
                    .data('selected-item', ui.item.label);
            },
        minLength: 3,
        position: {
            //my: "left top",
            //at: "left-23 bottom+10"
            my: "left top",
  at: "left-3 bottom+0",
            of: "#Street"
            }
        }).blur(function () {
            var value = $('#Street').val();
            //check if the input's value matches the selected item
            if (value != $('#Street').data('selected-item')) {
                //they don't, the user must have typed something else
                $('#Street')
                    .val('') //clear the input's text
                    .data('selected-item', ''); //clear the selected item
            }
        });
    })
</script>