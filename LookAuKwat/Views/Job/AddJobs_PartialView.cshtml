@model LookAuKwat.ViewModel.JobViewModel
@using LookAuKwat.ViewModel

@using (Ajax.BeginForm("AddJobs_PartialView","Job", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "ProductAdd" }, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Ajouter un emploi</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model=>model.Imageproduct.Image,htmlAttributes: new { @class = "control-label col-md-2" })
           
            @*<label class="control-label col-md-2" for="#imagesJobs"></label>*@
            <div class="col-md-6">

                <input type="file" name="ImageFile" multiple="multiple" @*onchange="readURL(this);"*@>

            </div>
            <div style="height:50px " class="col-md-4">
                <img id="InitiativeImageUpToDate" src="https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png" alt="photo de initiative" height="50" />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Category, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Town, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Town, SelectListMethod.GetListTownCameroon(), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Town, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Street, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Street, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Street, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.SearchOrAskJob, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.SearchOrAskJob, SelectListMethod.ChooseSearchOrAsk(), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SearchOrAskJob, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TypeContract, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.TypeContract, SelectListMethod.GetListWorkContract(), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TypeContract, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ActivitySector, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.ActivitySector, SelectListMethod.GetListActivitySector(), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ActivitySector, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Ajouter" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }




<script type="text/javascript">
    $(function () {

        $("#Street").autocomplete({
        source: function (request, response) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("ShowAddress", "Job")',
            dataType: "json",
            headers: {
                //"api-key": searchServiceApiKey,
                "Content-Type": "application/json"
            },
            data: JSON.stringify({
                top: 5,

               // country: $("#Country").val(),
                    town: $("#Town").val(),
                 // zipcode: $("#ZipCode").val(),
                term: request.term
            }),
            success: function (data) {
                if (data && data.length > 0) {
                      var parsedDate = $.parseJSON(data);

                        response((parsedDate["results"]).map(feature => feature["formatted"]));

                    }
                }
            });
        },
        minLength: 3,
        position: {
            //my: "left top",
            //at: "left-23 bottom+10"
            my: "left top",
  at: "left-3 bottom+0",
            of: "#Street"
            },
            appendTo: "#MyModalAddJob"
         });

    });
</script>