@model LookAuKwat.ViewModel.SeachJobViewModel
@using LookAuKwat.ViewModel

@using (Html.BeginForm("searchOfferAppart", "ApartmentRentalSearch" ))
{
    @Html.AntiForgeryToken()

    <div>
        <h4 class="text-center">Filtrer votre <strong>recherche</strong> dans la catégorie <strong>Immobilier</strong></h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="row">
           

            <div class="form-group col-xs-6 col-sm-4 col-md-3">
                @Html.LabelFor(model => model.TownSearch, htmlAttributes: new { @class = "control-label " })

                @Html.DropDownListFor(model => model.TownSearch, SelectListMethod.GetListTownCameroon(), "Toutes", new { @class = "form-control TownSearchApart" })
                @Html.ValidationMessageFor(model => model.TownSearch, "", new { @class = "text-danger" })

            </div>
            <div class="form-group col-xs-6 col-sm-4 col-md-3">
                @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label " })

                @Html.DropDownListFor(model => model.Type, SelectListMethod.TypeImmobilier(), "Tout", new { @class = "form-control " })
                @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })

            </div>
            <div class="form-group col-xs-6 col-sm-4 col-md-3">
                @Html.LabelFor(model => model.MinApartSurface, htmlAttributes: new { @class = "control-label" })

                @Html.EditorFor(model => model.MinApartSurface, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MinApartSurface, "", new { @class = "text-danger" })

            </div>
            <div class="form-group col-xs-6 col-sm-4 col-md-3">
                @Html.LabelFor(model => model.MaxApartSurface, htmlAttributes: new { @class = "control-label " })

                @Html.EditorFor(model => model.MaxApartSurface, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MaxApartSurface, "", new { @class = "text-danger" })

            </div>
            <div class="form-group col-xs-6 col-sm-4 col-md-3" id="RoomNumberDiv">
                @Html.LabelFor(model => model.RoomNumber, htmlAttributes: new { @class = "control-label" })

                @Html.EditorFor(model => model.RoomNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RoomNumber, "", new { @class = "text-danger" })

            </div>
            <div class="form-group col-xs-6 col-sm-4 col-md-3" id="FunitureOrNotDiv">
                @Html.LabelFor(model => model.FurnitureOrNot, htmlAttributes: new { @class = "control-label" })

                @Html.DropDownListFor(model => model.FurnitureOrNot, SelectListMethod.FurnitureOrNot(), "Tout", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.FurnitureOrNot, "", new { @class = "text-danger" })

            </div>

            @*<div class="form-group col-xs-6 col-sm-4 col-md-3">
                @Html.LabelFor(model => model.StreetSearch, htmlAttributes: new { @class = "control-label" })

                @Html.EditorFor(model => model.StreetSearch, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StreetSearch, "", new { @class = "text-danger" })

            </div>*@

            <div class="form-group col-xs-6 col-sm-4 col-md-3">
                @Html.LabelFor(model => model.PriceMinSearch, htmlAttributes: new { @class = "control-label " })

                @Html.EditorFor(model => model.PriceMinSearch, new { htmlAttributes = new { @class = "form-control PriceMinSearchApart" } })
                @Html.ValidationMessageFor(model => model.PriceMinSearch, "", new { @class = "text-danger" })

            </div>

            <div class="form-group col-xs-6 col-sm-4 col-md-3">
                @Html.LabelFor(model => model.PriceMaxSearch, htmlAttributes: new { @class = "control-label " })

                @Html.EditorFor(model => model.PriceMaxSearch, new { htmlAttributes = new { @class = "form-control PriceMaxSearchApart" } })
                @Html.ValidationMessageFor(model => model.PriceMaxSearch, "", new { @class = "text-danger" })

            </div>


            @*<div class="form-group col-xs-6 col-sm-4 col-md-3">
                @Html.LabelFor(model => model.SearchOrAskJobJob, htmlAttributes: new { @class = "control-label " })

                @Html.DropDownListFor(model => model.SearchOrAskJobJob, SelectListMethod.ChooseSearchOrAsk(), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SearchOrAskJobJob, "", new { @class = "text-danger" })

            </div>*@

        </div>
       
        <button id="submitApartt" type="submit" class="btn btn-primary">
            <span class="glyphicon glyphicon-search"></span> <strong>Rechercher @*(<span class="badge"></span> Résultats)*@</strong>
        </button>
    </div>
}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script type="text/javascript">
    $(function () {
        $("#Type").change(function () {
            console.log($("#Type").val());
            if ($("#Type").val() == 'terrain à vendre') {
                $("#RoomNumberDiv").addClass("hidden");
                $("#FunitureOrNotDiv").addClass("hidden");
            } else {
                $("#RoomNumberDiv").removeClass("hidden");
                $("#FunitureOrNotDiv").removeClass("hidden");
            }
        })

       // ResultAppartSpan();
        //$("#Type").change(ResultAppartSpan);
        //$("#TownSearch").change(ResultAppartSpan);
        //$("#FurnitureOrNot").change(ResultAppartSpan);

        //$('.PriceMinSearchApart').on('input', function () {
        //    ResultAppartSpan();
        //});
        //$('.PriceMaxSearchApart').on('input', function () {
        //    ResultAppartSpan();
        //});
        //$('#MinApartSurface').on('input', function () {
        //    ResultAppartSpan();
        //});
        //$('#MaxApartSurface').on('input', function () {
        //    ResultAppartSpan();
        //});

        //$('#RoomNumber').on('input', function () {
        //    ResultAppartSpan();
        //});

    })

    @*function ResultAppartSpan() {

        $.ajax({
            type: "POST",
            url: '@Url.Action("ResultSearchOfferApartSpan_Jason", "ApartmentRentalSearch")',
            dataType: "json",
            headers: {
                //"api-key": searchServiceApiKey,
                "Content-Type": "application/json"
            },
            data: JSON.stringify({

                type: $("#Type").val(),
                town: $(".TownSearchApart").val(),
                minSurface: $("#MinApartSurface").val(),
                maxSurface: $("#MaxApartSurface").val(),
                minPrice: $(".PriceMinSearchApart").val(),
                maxPrice: $(".PriceMaxSearchApart").val(),
                furnitureOrNot: $("#FurnitureOrNot").val(),
                roomNumber: $("#RoomNumber").val(),
            }),
            success: function (data) {

                var $badge = $("#submitApartt").find('.badge')
                    //number = Object.keys(data2).length;
                $badge.text(data);

            }
            //,
            //error: function (xhr) {
            //    console.log(xhr.responseText);
            //    alert("Une erreur est survenu  !");
            //}
        })
    }*@
</script>